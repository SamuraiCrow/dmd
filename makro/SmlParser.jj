
/* Short Markup Language (SML) */
/* example 
!sml version=1.0!                               <?xml version="1.0"?>
program :o="http://www.o-xml.org/lang/"{          <program xmlns:o="http://www.o-xml.org/lang">
  o:type name=Queen{                              <o:type name="Queen">
    // this is a type definition                    <!-- this is a type definition -->
    o:variable name=text{                           <o:variable name="text">
      "this is some random text"                      this is some random text
    }                                               </o:variable>
  }                                               </o:type>
}                                               </program>
*/

options { IGNORE_CASE = true; STATIC = false; UNICODE_INPUT = true; } 

PARSER_BEGIN(SmlParser)

public class SmlParser {

  private java.io.PrintStream out = System.out;

  public void setOutputStream(java.io.PrintStream out){
      this.out = out;
  }

  public static void main(String args[]) throws ParseException {
    SmlParser parser = new SmlParser(System.in);
    parser.Document();
  }

}

PARSER_END(SmlParser)

TOKEN :
{
  <WHITESPACE: ( " " | "\t" | "\n" | "\r" )+ >
}

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|":"|"-")* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */
TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < EXCLAMATION: "!" >
| < COLON: ":" >
| < EQUALS: "=" >
| < QUESTION: "?" >
}

TOKEN :
{
  < QUOTED_LITERAL:
      "'" ( ~["'"] )* "'"
  |  "\"" ( ~["\""] | "\\\"" )* "\""
  >
}

TOKEN :
{
  < STARTCOMMENT: "--" > : IN_COMMENT
}

<IN_COMMENT> TOKEN :
{
  < ENDCOMMENT: "--" > : DEFAULT
| < COMMENT: ( ~["-"] | "-" ~["-"] )+ >
}

TOKEN : 
{
  < SLASHSLASH: "//" > : IN_SINGLE_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT> TOKEN : 
{
  < SINGLE_LINE_COMMENT: ( ~["\n","\r"] )+ >
| < EOL: "\n"|"\r"|"\r\n" > : DEFAULT
}

void ws() :
{Token t;}
{
        t=<WHITESPACE>
                { out.print(t.image); }
}

String Name() :
{Token t;}
{
        t=<IDENTIFIER>
                { return t.image; }
}

String AttributeValue() :
{Token t;}
{
      t=<QUOTED_LITERAL>
                { return t.image; }
}

void Text() :
{Token t;}
{
      t=<QUOTED_LITERAL>
                { out.print(t.image.substring(1, t.image.length()-1)); } // todo: substitute \" for "
}

void AttributeList() :
{}
{
        ( Attribute() | NamespaceDeclaration() | ws() )*
}

void Attribute() :
{ String n; String v;}
{
        n=Name()
                { out.print(n); }
        ( ws() )? "="
                { out.print("="); }
        ( ws() )? v=AttributeValue()
                { out.print(v); }
}

void NamespaceDeclaration() :
{ String prefix; String uri;}
{
        ":" ( prefix=Name() "=" uri=AttributeValue()
                { out.print(" xmlns:"+prefix+"="+uri); }
            | "=" uri=AttributeValue() 
                { out.print(" xmlns="+uri); }
            )
}

void Element() :
{String n;}
{
        n=Name()
                { out.print("<"+n); }
            AttributeList()
            ( "{" 
                { out.print(">"); }
              MixedContent() "}" 
                { out.print("</"+n+">"); }
            | 
            ";" 
                { out.print("/>"); }
            )
}

void Document() :
{}
{
        ( Prolog() )?
        ( ProcessingInstruction() | Comment() | ws() )*
        Element()
        ( ws() )?
}

void MixedContent() :
{}
{
        ( Element() | Text() | Comment() | ProcessingInstruction() | ws() )*
}

void Comment() :
{Token c; Token e;}
{
        <STARTCOMMENT> c=<COMMENT> <ENDCOMMENT>
                { out.print("<!--"+c.image+"-->"); }
        |
        <SLASHSLASH> c=<SINGLE_LINE_COMMENT> e=<EOL>
                { out.print("<!--"+c.image+"-->"+e.image); }
}

void Prolog() :
{Token p;}
{
        "!sml"
                { out.print("<?xml "); }
            AttributeList()
        "!"
                { out.print("?>"); }
}

void ProcessingInstruction() :
{Token p;}
{
        "!" p=<IDENTIFIER>
                { out.print("<?"+p.image); }
            AttributeList()
        "!"
                { out.print("?>"); }
}

